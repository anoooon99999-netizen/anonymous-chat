// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let waitingTimer = null;
let waitingStartTime = null;
let onlineUsersCount = 0;

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é initApp
async function initApp() {
    try {
        if (typeof vkBridge !== 'undefined') {
            await vkBridge.send('VKWebAppInit');
            isVK = true;
            const userInfo = await vkBridge.send('VKWebAppGetUserInfo');
            vkUser = userInfo;
            updateUserInterface(userInfo);
            showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + userInfo.first_name + '!');
        } else {
            throw new Error('VK Bridge not available');
        }
    } catch (error) {
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
        isVK = false;
        vkUser = { 
            id: 'user_' + Date.now(), 
            first_name: '–ê–Ω–æ–Ω–∏–º–Ω—ã–π', 
            last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' 
        };
        updateUserInterface(vkUser);
        showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!');
    }

    initSocket();
    await loadAndRenderChats();
    loadUserStats();
    updateProfileStats();
    setupEventListeners();
    updateOnlineUsersCount();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é createChat
async function createChat() {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞...');
    
    const myGender = document.querySelector('#myGenderOptions .option-button.active').textContent;
    const myAge = document.getElementById('myAge').value;
    const partnerGender = document.querySelector('#partnerGenderOptions .option-button.active').textContent;
    const minAge = document.getElementById('minAge').value;
    const maxAge = document.getElementById('maxAge').value;

    if (!myAge || myAge < 18 || myAge > 80) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-80)');
        return;
    }

    if (!minAge || !maxAge || minAge >= maxAge || minAge < 18 || maxAge > 80) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (18-80)');
        return;
    }

    const chatData = {
        user_id: vkUser?.id || 'anonymous',
        user_gender: myGender,
        user_age: parseInt(myAge),
        partner_gender: partnerGender,
        min_age: parseInt(minAge),
        max_age: parseInt(maxAge),
        theme: currentTheme
    };

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', chatData);

    try {
        const response = await fetch(API_URL + '/api/chats', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(chatData)
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log('–ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', result);
            
            const newChat = {
                id: result.id,
                gender: myGender + ', ' + myAge,
                lookingFor: partnerGender + ', ' + minAge + '-' + maxAge,
                theme: currentTheme,
                timestamp: Date.now()
            };
            allChats.unshift(newChat);
            renderChatsList();
            userStats.createdChats++;
            saveUserStats();
            updateProfileStats();
            closeCreateChatModal();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç
            showWaitingScreen(newChat);
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + response.status);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: ' + error.message);
    }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è
function showWaitingScreen(chat) {
    currentChat = chat;
    showScreen('waitingScreen');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
    waitingStartTime = Date.now();
    startWaitingTimer();
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã —á–µ—Ä–µ–∑ WebSocket)
    simulatePartnerSearch();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    updateOnlineUsersCount();
}

// –¢–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
function startWaitingTimer() {
    waitingTimer = setInterval(() => {
        const elapsed = Math.floor((Date.now() - waitingStartTime) / 1000);
        const minutes = Math.floor(elapsed / 60);
        const seconds = elapsed % 60;
        document.getElementById('waitingTime').textContent = 
            `${minutes}:${seconds.toString().padStart(2, '0')}`;
        
        // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        if (elapsed < 30) {
            document.getElementById('waitingText').textContent = 
                '–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º...';
        } else if (elapsed < 60) {
            document.getElementById('waitingText').textContent = 
                '–í—Å–µ –µ—â–µ –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...';
        } else {
            document.getElementById('waitingText').textContent = 
                '–ü–æ–∏—Å–∫ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–±—ã—á–Ω–æ...';
        }
    }, 1000);
}

// –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
function simulatePartnerSearch() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã WebSocket —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
    // –°–µ–π—á–∞—Å —Å–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ 3-10 —Å–µ–∫—É–Ω–¥
    const randomDelay = 3000 + Math.random() * 7000;
    
    setTimeout(() => {
        if (currentChat) {
            clearInterval(waitingTimer);
            showNotification('üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!');
            startChat(currentChat);
        }
    }, randomDelay);
}

// –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è
function cancelWaiting() {
    if (waitingTimer) {
        clearInterval(waitingTimer);
        waitingTimer = null;
    }
    
    if (currentChat) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        console.log('–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è —á–∞—Ç–∞:', currentChat.id);
        currentChat = null;
    }
    
    showScreen('chatsScreen');
    showNotification('–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω');
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function updateOnlineUsersCount() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ —á–∏—Å–ª–æ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ –±—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
    onlineUsersCount = 50 + Math.floor(Math.random() * 150);
    document.getElementById('onlineUsersCount').textContent = onlineUsersCount;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é startChat
async function startChat(chat) {
    currentChat = chat;
    document.getElementById('chatRoomTitle').textContent = '–ß–∞—Ç: ' + chat.theme;
    showScreen('chatRoomScreen');
    
    document.body.classList.add('chat-room-active');
    
    if (socket) {
        socket.emit('join_chat', { chatId: chat.id, userId: vkUser?.id });
    }
    
    await loadMessages(chat.id);
    
    setTimeout(() => {
        const input = document.getElementById('messageInput');
        if (input) input.focus();
    }, 300);
}

// –û–±–Ω–æ–≤–ª—è–µ–º renderChatsList (—É–±–∏—Ä–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
function renderChatsList() {
    const container = document.getElementById('chatsContainer');
    container.innerHTML = '';

    const filteredChats = allChats.filter(chat => chat.theme === currentTheme);

    if (filteredChats.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                <div style="font-size: 48px; margin-bottom: 16px;">üí¨</div>
                <div>–ß–∞—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ "${currentTheme}" –ø–æ–∫–∞ –Ω–µ—Ç</div>
                <div style="font-size: 14px; margin-top: 8px;">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç!</div>
            </div>
        `;
        return;
    }
    
    filteredChats.forEach(chat => {
        const chatElement = document.createElement('div');
        chatElement.className = 'user-card';
        chatElement.onclick = () => startChat(chat);
        
        chatElement.innerHTML = `
            <div class="user-info">
                <div class="info-row">
                    <span class="info-label">–ü–æ–ª:</span>
                    <span class="info-value">${chat.gender}</span>
                </div>
                <div class="info-row">
                    <span class="info-label">–ò—â—É:</span>
                    <span class="info-value">${chat.lookingFor}</span>
                </div>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div class="theme-tag">${chat.theme}</div>
                <div style="font-size: 12px; color: var(--text-secondary);">${getTimeAgo(chat.timestamp)}</div>
            </div>
        `;
        container.appendChild(chatElement);
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥–∞ –≤ VK
function updateUserInterface(userInfo) {
    document.getElementById('vkUserName').textContent = userInfo.first_name + ' ' + userInfo.last_name;
    document.getElementById('vkUserInfo').style.display = 'flex';
    document.getElementById('profileName').textContent = userInfo.first_name + ' ' + userInfo.last_name;
    document.getElementById('currentAvatar').textContent = userInfo.first_name.charAt(0);
    
    // –£–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (isVK) {
        showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + userInfo.first_name + '!');
    } else {
        showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!');
    }
}

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
