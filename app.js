// ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –ß–ê–¢–û–í =====
let activeChats = [];
let chatIdCounter = 1;
let currentSocket = null;

// ===== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê =====

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenId) {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenId);
    const screens = document.querySelectorAll('.screen');
    screens.forEach(screen => {
        screen.classList.remove('active');
    });
    
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    const menuItems = document.querySelectorAll('.menu-item');
    menuItems.forEach(item => {
        item.classList.remove('active');
    });
    
    if (screenId === 'chatsScreen') {
        document.querySelector('.menu-item:nth-child(1)')?.classList.add('active');
    } else if (screenId === 'profileScreen') {
        document.querySelector('.menu-item:nth-child(2)')?.classList.add('active');
    } else if (screenId === 'settingsScreen') {
        document.querySelector('.menu-item:nth-child(3)')?.classList.add('active');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —á–∞—Ç–æ–≤
function switchChatTab(tabName) {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
    
    const tabs = document.querySelectorAll('.chat-tab');
    tabs.forEach(tab => {
        tab.classList.remove('active');
    });
    
    const activeTab = Array.from(tabs).find(tab => 
        tab.textContent.includes(tabName)
    );
    if (activeTab) {
        activeTab.classList.add('active');
    }
    
    const createChatText = document.getElementById('createChatText');
    if (createChatText) {
        createChatText.textContent = `–°–æ–∑–¥–∞—Ç—å —á–∞—Ç –¥–ª—è ${tabName}`;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function openCreateChatModal() {
    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
    const modal = document.getElementById('createChatModal');
    if (modal) {
        modal.style.display = 'flex';
    }
}

function closeCreateChatModal() {
    console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
    const modal = document.getElementById('createChatModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

function toggleOption(button) {
    const parent = button.parentElement;
    const buttons = parent.querySelectorAll('.option-button');
    buttons.forEach(btn => btn.classList.remove('active'));
    button.classList.add('active');
}

function updateAgeRange() {
    const minSlider = document.getElementById('minAgeSlider');
    const maxSlider = document.getElementById('maxAgeSlider');
    const minAgeValue = document.getElementById('minAgeValue');
    const maxAgeValue = document.getElementById('maxAgeValue');
    
    if (minSlider && maxSlider && minAgeValue && maxAgeValue) {
        minAgeValue.textContent = minSlider.value;
        maxAgeValue.textContent = maxSlider.value;
    }
}

// –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function enableNotifications() {
    console.log('–í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    alert('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!');
}

function createChat() {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞');
    
    const myGender = document.querySelector('#myGenderOptions .option-button.active')?.textContent || '–ú—É–∂—Å–∫–æ–π';
    const partnerGender = document.querySelector('#partnerGenderOptions .option-button.active')?.textContent || '–õ—é–±–æ–π';
    const myAge = document.getElementById('myAge')?.value || '25';
    const minAge = document.getElementById('minAgeSlider')?.value || '18';
    const maxAge = document.getElementById('maxAgeSlider')?.value || '35';
    
    const activeTab = document.querySelector('.chat-tab.active');
    const chatType = activeTab ? activeTab.textContent.replace(/[^\w\s]/g, '').trim() : '–û–±—â–µ–Ω–∏–µ';
    
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:', { chatType, myGender, partnerGender, myAge, minAge, maxAge });
    
    closeCreateChatModal();
    startWaiting(chatType);
}

function cancelWaiting() {
    console.log('–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞');
    
    if (waitingTimer) {
        clearInterval(waitingTimer);
        waitingTimer = null;
    }
    
    showScreen('chatsScreen');
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ì–û –ß–ê–¢–ê =====

function addChatToHistory(chatType, partnerInfo) {
    const chatId = 'chat_' + chatIdCounter++;
    const newChat = {
        id: chatId,
        type: chatType,
        partner: partnerInfo || {
            name: '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            avatar: 'üë§'
        },
        lastMessage: '–ß–∞—Ç –Ω–∞—á–∞—Ç',
        timestamp: new Date(),
        unread: 0,
        online: true,
        messages: []
    };
    
    activeChats.unshift(newChat);
    updateChatsList();
    return chatId;
}

function updateChatsList() {
    const chatsContainer = document.getElementById('chatsContainer');
    if (!chatsContainer) return;
    
    if (activeChats.length === 0) {
        chatsContainer.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üí¨</div>
                <div class="empty-title">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤</div>
                <div class="empty-text">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</div>
            </div>
        `;
        return;
    }
    
    chatsContainer.innerHTML = activeChats.map(chat => `
        <div class="chat-card" onclick="openChat('${chat.id}')">
            <div class="chat-avatar">${chat.partner.avatar}</div>
            <div class="chat-info">
                <div class="chat-header">
                    <div class="chat-name">${chat.partner.name}</div>
                    <div class="chat-time">${formatTime(chat.timestamp)}</div>
                </div>
                <div class="chat-preview">
                    <span class="chat-last-message">${chat.lastMessage}</span>
                    ${chat.unread > 0 ? `<span class="unread-badge">${chat.unread}</span>` : ''}
                </div>
                <div class="chat-meta">
                    <span class="chat-type">${getChatTypeIcon(chat.type)} ${chat.type}</span>
                    <span class="online-status ${chat.online ? 'online' : 'offline'}">
                        ${chat.online ? 'üü¢ –æ–Ω–ª–∞–π–Ω' : '‚ö´ –æ—Ñ–ª–∞–π–Ω'}
                    </span>
                </div>
            </div>
        </div>
    `).join('');
}

function formatTime(date) {
    const now = new Date();
    const diff = now - new Date(date);
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    
    if (minutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
    
    return new Date(date).toLocaleDateString('ru-RU');
}

function getChatTypeIcon(type) {
    const icons = {
        '–û–±—â–µ–Ω–∏–µ': 'üí¨',
        '–§–ª–∏—Ä—Ç': 'üòä',
        '–†–æ–ª—å': 'üé≠'
    };
    return icons[type] || 'üí¨';
}

function openChat(chatId) {
    const chat = activeChats.find(c => c.id === chatId);
    if (chat) {
        console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞:', chatId);
        showScreen('chatRoomScreen');
        
        const chatTitle = document.getElementById('chatRoomTitle');
        if (chatTitle) {
            chatTitle.textContent = `–ß–∞—Ç —Å ${chat.partner.name}`;
        }
        
        loadChatHistory(chatId);
        markAsRead(chatId);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
        initChatConnection(chatId);
    }
}

function loadChatHistory(chatId) {
    const messagesContainer = document.getElementById('messagesContainer');
    if (!messagesContainer) return;
    
    messagesContainer.innerHTML = '';
    
    const chat = activeChats.find(c => c.id === chatId);
    if (chat && chat.messages.length > 0) {
        chat.messages.forEach(msg => {
            addMessageToDisplay(msg.text, msg.type, msg.timestamp);
        });
    } else {
        // –ü—É—Å—Ç–æ–π —á–∞—Ç - –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        addMessageToDisplay('–ß–∞—Ç –Ω–∞—á–∞—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', 'system', new Date());
    }
}

function addMessageToDisplay(text, type = 'received', timestamp = new Date()) {
    const messagesContainer = document.getElementById('messagesContainer');
    if (!messagesContainer) return;
    
    const messageElement = document.createElement('div');
    messageElement.className = `message ${type}`;
    messageElement.innerHTML = `
        <div class="message-avatar">${type === 'received' ? 'üë§' : 'üòä'}</div>
        <div class="message-content">
            <div class="message-text">${text}</div>
            <div class="message-time">${formatTime(timestamp)}</div>
        </div>
    `;
    
    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function markAsRead(chatId) {
    const chat = activeChats.find(c => c.id === chatId);
    if (chat) {
        chat.unread = 0;
        updateChatsList();
    }
}

function sendMessage() {
    const input = document.getElementById('messageInput');
    if (input && input.value.trim()) {
        const messageText = input.value.trim();
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageText);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        addMessageToDisplay(messageText, 'sent', new Date());
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket
        if (currentSocket) {
            currentSocket.emit('send_message', {
                text: messageText,
                chatId: window.currentChatId
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
        if (window.currentChatId) {
            const chat = activeChats.find(c => c.id === window.currentChatId);
            if (chat) {
                chat.lastMessage = messageText;
                chat.timestamp = new Date();
                chat.messages.push({
                    text: messageText,
                    type: 'sent',
                    timestamp: new Date()
                });
                updateChatsList();
            }
        }
        
        input.value = '';
    }
}

function handleTyping() {
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –≠–ö–†–ê–ù–ê –û–ñ–ò–î–ê–ù–ò–Ø =====

function startWaiting(chatType = '–û–±—â–µ–Ω–∏–µ') {
    console.log('–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è:', chatType);
    showScreen('waitingScreen');
    startWaitingTimer();
    updateOnlineUsers();
    
    window.currentChatType = chatType;
    simulateSearch();
}

function startWaitingTimer() {
    waitingSeconds = 0;
    updateWaitingTime();
    
    if (waitingTimer) {
        clearInterval(waitingTimer);
    }
    
    waitingTimer = setInterval(() => {
        waitingSeconds++;
        updateWaitingTime();
        
        if (waitingSeconds % 10 === 0) {
            updateOnlineUsers();
        }
        
        // –†–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è
        if (waitingSeconds === 20) {
            autoFindPartner();
        }
    }, 1000);
}

function updateWaitingTime() {
    const minutes = Math.floor(waitingSeconds / 60);
    const seconds = waitingSeconds % 60;
    const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    
    const waitingTimeElement = document.getElementById('waitingTime');
    if (waitingTimeElement) {
        waitingTimeElement.textContent = timeString;
    }
}

function updateOnlineUsers() {
    const onlineCount = Math.floor(Math.random() * 1000) + 1500;
    const onlineUsersElement = document.getElementById('onlineUsersCount');
    if (onlineUsersElement) {
        onlineUsersElement.textContent = onlineCount.toLocaleString();
    }
}

function simulateSearch() {
    const waitingText = document.getElementById('waitingText');
    const steps = [
        "–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º...",
        "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...", 
        "–ü–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–∞—Ä—É...",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã...",
        "–ü–æ—á—Ç–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..."
    ];
    
    let currentStep = 0;
    
    const searchInterval = setInterval(() => {
        if (waitingText) {
            waitingText.textContent = steps[currentStep];
            currentStep = (currentStep + 1) % steps.length;
        }
    }, 3000);
    
    setTimeout(() => {
        clearInterval(searchInterval);
    }, 19000);
}

function autoFindPartner() {
    console.log('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!');
    
    if (waitingTimer) {
        clearInterval(waitingTimer);
        waitingTimer = null;
    }
    
    const partnerInfo = generatePartnerInfo();
    const chatId = addChatToHistory(window.currentChatType, partnerInfo);
    window.currentChatId = chatId;
    
    showPartnerFoundNotification();
}

function generatePartnerInfo() {
    const genders = ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'];
    const names = {
        '–ú—É–∂—Å–∫–æ–π': ['–ê–ª–µ–∫—Å–µ–π', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞–∫—Å–∏–º', '–ò–≤–∞–Ω', '–°–µ—Ä–≥–µ–π'],
        '–ñ–µ–Ω—Å–∫–∏–π': ['–ê–Ω–Ω–∞', '–ú–∞—Ä–∏—è', '–ï–ª–µ–Ω–∞', '–û–ª—å–≥–∞', '–ù–∞—Ç–∞–ª—å—è']
    };
    
    const gender = genders[Math.floor(Math.random() * genders.length)];
    const name = names[gender][Math.floor(Math.random() * names[gender].length)];
    
    return {
        name: name,
        gender: gender,
        avatar: gender === '–ú—É–∂—Å–∫–æ–π' ? 'üë®' : 'üë©'
    };
}

function showPartnerFoundNotification() {
    const waitingContent = document.querySelector('.waiting-content');
    if (!waitingContent) return;
    
    const notification = document.createElement('div');
    notification.className = 'partner-found-notification';
    notification.innerHTML = `
        <div class="found-animation">üéâ</div>
        <div class="found-title">–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!</div>
        <div class="found-subtitle">–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç...</div>
        <button class="start-chat-button" onclick="enterChatRoom()">–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</button>
    `;
    
    waitingContent.innerHTML = '';
    waitingContent.appendChild(notification);
    updateChatsList();
    
    setTimeout(enterChatRoom, 3000);
}

function enterChatRoom() {
    console.log('–í—Ö–æ–¥ –≤ —á–∞—Ç –∫–æ–º–Ω–∞—Ç—É');
    
    if (waitingTimer) {
        clearInterval(waitingTimer);
        waitingTimer = null;
    }
    
    showScreen('chatRoomScreen');
    
    if (window.currentChatId) {
        loadChatHistory(window.currentChatId);
        
        const chat = activeChats.find(c => c.id === window.currentChatId);
        if (chat) {
            const chatTitle = document.getElementById('chatRoomTitle');
            if (chatTitle) {
                chatTitle.textContent = `–ß–∞—Ç —Å ${chat.partner.name}`;
            }
        }
    }
}

// ===== WEB SOCKET –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
function initChatConnection(chatId) {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞:', chatId);
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    currentSocket = {
        emit: (event, data) => {
            console.log('WebSocket emit:', event, data);
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        }
    };
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    showScreen('chatsScreen');
    switchChatTab('–û–±—â–µ–Ω–∏–µ');
    updateAgeRange();
    updateChatsList(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (shareApp, openMyChats, etc.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
