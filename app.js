// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = window.location.origin;
const SOCKET_URL = window.location.origin;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allChats = [];
let userStats = {
    createdChats: 0,
    sentMessages: 0,
    friends: 0,
    daysActive: 1,
    reputation: 150
};
let vkUser = null;
let currentChat = null;
let isVK = false;
let currentTheme = '–û–±—â–µ–Ω–∏–µ';
let typingTimer = null;
let onlineUsers = new Set();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    try {
        if (typeof vkBridge !== 'undefined') {
            await vkBridge.send('VKWebAppInit');
            isVK = true;
            const userInfo = await vkBridge.send('VKWebAppGetUserInfo');
            vkUser = userInfo;
            updateUserInterface(userInfo);
            showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + userInfo.first_name + '!');
        } else {
            throw new Error('VK Bridge not available');
        }
    } catch (error) {
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ VK:', error.message);
        isVK = false;
        // ‚≠ê –£–ë–ò–†–ê–ï–ú –ò–ú–Ø "–¢–ï–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨" - –î–ï–õ–ê–ï–ú –ü–û–õ–ù–û–°–¢–¨–Æ –ê–ù–û–ù–ò–ú–ù–´–ú
        vkUser = { 
            id: 'user_' + Math.random().toString(36).substr(2, 9),
            first_name: '–ê–Ω–æ–Ω–∏–º',
            last_name: ''
        };
        updateUserInterface(vkUser);
        showNotification('–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∂–∏–º - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∞—Ç—ã');
    }

    initSocket();
    await loadAndRenderChats();
    loadUserStats();
    updateProfileStats();
    setupEventListeners();
}

function updateUserInterface(userInfo) {
    document.getElementById('vkUserName').textContent = userInfo.first_name + (userInfo.last_name ? ' ' + userInfo.last_name : '');
    document.getElementById('vkUserInfo').style.display = 'flex';
    document.getElementById('profileName').textContent = userInfo.first_name + (userInfo.last_name ? ' ' + userInfo.last_name : '');
    document.getElementById('currentAvatar').textContent = userInfo.first_name.charAt(0);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —á–∞—Ç–æ–≤
function switchChatTab(theme) {
    currentTheme = theme;
    
    document.querySelectorAll('.chat-tab').forEach(tab => tab.classList.remove('active'));
    event.target.classList.add('active');
    
    document.getElementById('createChatText').textContent = '–°–æ–∑–¥–∞—Ç—å —á–∞—Ç –¥–ª—è ' + theme;
    renderChatsList();
}

function initSocket() {
    try {
        // ‚≠ê –ò–°–ü–û–õ–¨–ó–£–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –ü–ï–†–ï–ú–ï–ù–ù–£–Æ socket –∏–∑ index.html
        socket = io(SOCKET_URL);
        socket.on('connect', () => {
            console.log('Connected to server');
            if (currentChat) {
                socket.emit('join_chat', { chatId: currentChat.id, userId: vkUser?.id });
            }
        });
        
        socket.on('new_message', (message) => {
            if (currentChat && message.chat_id === currentChat.id) {
                addMessageToChat(message);
            }
        });
        
        socket.on('user_joined', (data) => {
            if (currentChat && data.chatId === currentChat.id) {
                onlineUsers.add(data.userId);
                updateOnlineCount();
                showNotification('üë§ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É');
            }
        });
        
        socket.on('user_left', (data) => {
            if (currentChat && data.chatId === currentChat.id) {
                onlineUsers.delete(data.userId);
                updateOnlineCount();
                showNotification('üë§ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç');
            }
        });
        
        socket.on('chat_activated', (data) => {
            if (currentChat && data.chatId === currentChat.id) {
                showNotification('üéâ –ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ');
            }
            // ‚≠ê –û–ë–ù–û–í–õ–Ø–ï–ú –°–ü–ò–°–û–ö –ß–ê–¢–û–í –ü–†–ò –ê–ö–¢–ò–í–ê–¶–ò–ò –õ–Æ–ë–û–ì–û –ß–ê–¢–ê
            loadAndRenderChats();
        });
        
        socket.on('typing_start', (data) => {
            if (currentChat && data.chatId === currentChat.id && data.userId !== vkUser?.id) {
                document.getElementById('typingIndicator').style.display = 'inline';
            }
        });
        
        socket.on('typing_stop', (data) => {
            if (currentChat && data.chatId === currentChat.id) {
                document.getElementById('typingIndicator').style.display = 'none';
            }
        });
        
        socket.on('online_users', (data) => {
            if (currentChat && data.chatId === currentChat.id) {
                onlineUsers = new Set(data.users);
                updateOnlineCount();
            }
        });
        
        socket.on('error', (data) => {
            showNotification('‚ùå ' + data.message);
        });
        
        // ‚≠ê –°–õ–£–®–ê–¢–ï–õ–¨ –î–õ–Ø –ù–û–í–´–• –ß–ê–¢–û–í
        socket.on('new_chat_created', (chat) => {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç:', chat);
            
            const newChat = {
                id: chat.id,
                gender: chat.user_gender + ', ' + chat.user_age,
                lookingFor: chat.partner_gender + ', ' + chat.min_age + '-' + chat.max_age,
                theme: chat.theme,
                participants_count: chat.participants_count,
                timestamp: new Date(chat.created_at).getTime()
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            allChats.unshift(newChat);
            
            // –ï—Å–ª–∏ –º—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ —Å —ç—Ç–æ–π —Ç–µ–º–æ–π - –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (chat.theme === currentTheme) {
                renderChatsList();
                showNotification('üì¢ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "' + chat.theme + '"');
            }
        });
        
        // ‚≠ê –°–õ–£–®–ê–¢–ï–õ–¨ –î–õ–Ø –£–î–ê–õ–ï–ù–ù–´–• –ß–ê–¢–û–í
        socket.on('chat_removed', (data) => {
            console.log('üóëÔ∏è –ß–∞—Ç —É–¥–∞–ª–µ–Ω:', data.chatId);
            
            // –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
            allChats = allChats.filter(chat => chat.id !== data.chatId);
            renderChatsList();
        });
        
    } catch (error) {
        console.error('Socket error:', error);
    }
}

function updateOnlineCount() {
    const count = onlineUsers.size;
    // ‚≠ê –£–ü–†–û–©–ê–ï–ú –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï - –¢–û–õ–¨–ö–û –ö–û–õ–ò–ß–ï–°–¢–í–û –û–ù–õ–ê–ô–ù
    document.getElementById('onlineCount').textContent = count + ' –æ–Ω–ª–∞–π–Ω';
}

function handleTyping() {
    if (!currentChat || !socket) return;
    
    socket.emit('typing_start', { 
        chatId: currentChat.id, 
        userId: vkUser?.id 
    });
    
    clearTimeout(typingTimer);
    typingTimer = setTimeout(() => {
        socket.emit('typing_stop', { 
            chatId: currentChat.id, 
            userId: vkUser?.id 
        });
    }, 1000);
}

// ‚≠ê –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –ß–ê–¢–û–í –° –°–ï–†–í–ï–†–ê
window.loadChatsFromServer = async function() {
    try {
        const response = await fetch(API_URL + '/api/chats');
        const chats = await response.json();
        return chats.map(chat => ({
            id: chat.id,
            gender: chat.user_gender + ', ' + chat.user_age,
            lookingFor: chat.partner_gender + ', ' + chat.min_age + '-' + chat.max_age,
            theme: chat.theme,
            participants_count: chat.participants_count,
            timestamp: new Date(chat.created_at).getTime()
        }));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤');
        return [];
    }
}

async function loadAndRenderChats() {
    const chats = await window.loadChatsFromServer();
    allChats = chats;
    renderChatsList();
}

function renderChatsList() {
    const container = document.getElementById('chatsContainer');
    container.innerHTML = '';

    const filteredChats = allChats.filter(chat => chat.theme === currentTheme);

    if (filteredChats.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                <div style="font-size: 48px; margin-bottom: 16px;">üí¨</div>
                <div>–ß–∞—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ "${currentTheme}" –ø–æ–∫–∞ –Ω–µ—Ç</div>
                <div style="font-size: 14px; margin-top: 8px;">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç!</div>
            </div>
        `;
        return;
    }
    
    filteredChats.forEach(chat => {
        const chatElement = document.createElement('div');
        chatElement.className = 'user-card';
        chatElement.onclick = () => startChat(chat);
        
        chatElement.innerHTML = `
            <div class="user-info">
                <div class="info-row">
                    <span class="info-label">–ü–æ–ª:</span>
                    <span class="info-value">${chat.gender}</span>
                </div>
                <div class="info-row">
                    <span class="info-label">–ò—â—É:</span>
                    <span class="info-value">${chat.lookingFor}</span>
                </div>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div class="theme-tag">${chat.theme}</div>
                <div style="font-size: 12px; color: var(--text-secondary);">
                    ${getTimeAgo(chat.timestamp)}
                </div>
            </div>
        `;
        container.appendChild(chatElement);
    });
}

function openCreateChatModal() {
    document.getElementById('modalTitle').textContent = '–°–æ–∑–¥–∞—Ç—å —á–∞—Ç –¥–ª—è ' + currentTheme;
    document.getElementById('createChatModal').style.display = 'block';
}

function updateAgeRange() {
    const minSlider = document.getElementById('minAgeSlider');
    const maxSlider = document.getElementById('maxAgeSlider');
    
    let minAge = parseInt(minSlider.value);
    let maxAge = parseInt(maxSlider.value);
    
    if (minAge > maxAge) {
        minAge = maxAge;
        minSlider.value = minAge;
    }
    
    document.getElementById('minAgeValue').textContent = minAge;
    document.getElementById('maxAgeValue').textContent = maxAge;
    
    document.getElementById('minAge').value = minAge;
    document.getElementById('maxAge').value = maxAge;
}

async function createChat() {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞...');
    
    const myGender = document.querySelector('#myGenderOptions .option-button.active').textContent;
    const myAge = document.getElementById('myAge').value;
    const partnerGender = document.querySelector('#partnerGenderOptions .option-button.active').textContent;
    const minAge = document.getElementById('minAge').value;
    const maxAge = document.getElementById('maxAge').value;

    if (!myAge || myAge < 18 || myAge > 80) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-80)');
        return;
    }

    if (!minAge || !maxAge || minAge >= maxAge || minAge < 18 || maxAge > 80) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (18-80)');
        return;
    }

    const chatData = {
        user_id: vkUser?.id || 'anonymous',
        user_gender: myGender,
        user_age: parseInt(myAge),
        partner_gender: partnerGender,
        min_age: parseInt(minAge),
        max_age: parseInt(maxAge),
        theme: currentTheme
    };

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', chatData);

    try {
        const response = await fetch(API_URL + '/api/chats', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(chatData)
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log('–ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', result);
            
            // ‚≠ê –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú –ß–ê–¢ –í–†–£–ß–ù–£–Æ - –û–ù –ü–†–ò–î–ï–¢ –ß–ï–†–ï–ó WebSocket
            userStats.createdChats++;
            saveUserStats();
            updateProfileStats();
            showNotification('‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
            closeCreateChatModal();
            
            setTimeout(() => startChat({
                id: result.id,
                gender: myGender + ', ' + myAge,
                lookingFor: partnerGender + ', ' + minAge + '-' + maxAge,
                theme: currentTheme,
                participants_count: 1,
                timestamp: Date.now()
            }), 500);
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + response.status);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: ' + error.message);
    }
}

async function startChat(chat) {
    currentChat = chat;
    // ‚≠ê –£–ö–†–ê–®–ê–ï–ú –ó–ê–ì–û–õ–û–í–û–ö –ß–ê–¢–ê
    document.getElementById('chatRoomTitle').textContent = getChatEmoji(chat.theme) + ' ' + chat.theme;
    showScreen('chatRoomScreen');
    
    document.body.classList.add('chat-room-active');
    
    if (socket) {
        socket.emit('join_chat', { chatId: chat.id, userId: vkUser?.id });
    }
    
    await loadMessages(chat.id);
    
    setTimeout(() => {
        const input = document.getElementById('messageInput');
        if (input) input.focus();
    }, 300);
}

// ‚≠ê –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –≠–ú–û–î–ó–ò –í –ó–ê–ì–û–õ–û–í–ö–ï –ß–ê–¢–ê
function getChatEmoji(theme) {
    const emojiMap = {
        '–û–±—â–µ–Ω–∏–µ': 'üí¨',
        '–§–ª–∏—Ä—Ç': 'üòä',
        '–†–æ–ª—å': 'üé≠'
    };
    return emojiMap[theme] || 'üí¨';
}

async function loadMessages(chatId) {
    try {
        const response = await fetch(API_URL + '/api/messages?chat_id=' + chatId);
        const messages = await response.json();
        const container = document.getElementById('messagesContainer');
        container.innerHTML = '';
        
        if (messages.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                    <div style="font-size: 48px; margin-bottom: 16px;">üí≠</div>
                    <div>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                    <div style="font-size: 14px; margin-top: 8px;">–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º!</div>
                </div>
            `;
            return;
        }
        
        messages.forEach(msg => {
            addMessageToChat(msg);
        });
        
        container.scrollTop = container.scrollHeight;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
}

function addMessageToChat(message) {
    const container = document.getElementById('messagesContainer');
    
    if (container.innerHTML.includes('–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π')) {
        container.innerHTML = '';
    }
    
    const messageElement = document.createElement('div');
    const isMyMessage = message.user_id === (vkUser?.id || 'anonymous');
    messageElement.className = 'message ' + (isMyMessage ? 'message-my' : 'message-their');
    
    // ‚≠ê –£–ö–†–ê–®–ê–ï–ú –°–û–û–ë–©–ï–ù–ò–Ø
    let messageContent = `
        <div class="message-content">${message.message}</div>
        <div class="message-time">${new Date(message.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>
    `;
    
    if (!isMyMessage) {
        // ‚≠ê –£–ë–ò–†–ê–ï–ú –ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - –î–ï–õ–ê–ï–ú –ü–û–õ–ù–û–°–¢–¨–Æ –ê–ù–û–ù–ò–ú–ù–´–ú
        messageContent = `
            <div class="message-content">${message.message}</div>
            <div class="message-time">${new Date(message.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>
        `;
    }
    
    messageElement.innerHTML = messageContent;
    container.appendChild(messageElement);
    container.scrollTop = container.scrollHeight;
}

async function sendMessage() {
    const input = document.getElementById('messageInput');
    const text = input.value.trim();
    
    if (!text || !currentChat) return;

    try {
        const response = await fetch(API_URL + '/api/messages', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                },
            body: JSON.stringify({
                chat_id: currentChat.id,
                user_id: vkUser?.id || 'anonymous',
                message: text,
                // ‚≠ê –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–£–°–¢–û–ï –ò–ú–Ø –î–õ–Ø –ê–ù–û–ù–ò–ú–ù–û–°–¢–ò
                user_name: ''
            })
        });
        
        if (response.ok) {
            input.value = '';
            userStats.sentMessages++;
            saveUserStats();
            updateProfileStats();
            
            if (socket) {
                socket.emit('typing_stop', { 
                    chatId: currentChat.id, 
                    userId: vkUser?.id 
                });
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
}

function closeCreateChatModal() {
    document.getElementById('createChatModal').style.display = 'none';
}

function toggleOption(element) {
    const parent = element.parentElement;
    parent.querySelectorAll('.option-button').forEach(btn => btn.classList.remove('active'));
    element.classList.add('active');
}

function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => screen.classList.remove('active'));
    document.getElementById(screenId).classList.add('active');
    
    if (screenId !== 'chatRoomScreen') {
        document.body.classList.remove('chat-room-active');
    } else {
        document.body.classList.add('chat-room-active');
    }
    
    document.querySelectorAll('.menu-item').forEach(item => item.classList.remove('active'));
    const menuMap = {
        'chatsScreen': 0,
        'profileScreen': 1,
        'settingsScreen': 2
    };
    
    if (menuMap[screenId] !== undefined) {
        const menuItems = document.querySelectorAll('.menu-item');
        menuItems[menuMap[screenId]].classList.add('active');
    }
    
    if (screenId !== 'chatRoomScreen' && currentChat && socket) {
        socket.emit('leave_chat', { chatId: currentChat.id, userId: vkUser?.id });
        document.getElementById('typingIndicator').style.display = 'none';
    }
}

function loadUserStats() {
    const savedStats = localStorage.getItem('user_stats');
    if (savedStats) {
        userStats = JSON.parse(savedStats);
    }
    
    const firstVisit = localStorage.getItem('first_visit');
    if (!firstVisit) {
        localStorage.setItem('first_visit', Date.now());
    } else {
        const days = Math.floor((Date.now() - parseInt(firstVisit)) / (1000 * 60 * 60 * 24));
        userStats.daysActive = Math.max(1, days);
    }
}

function saveUserStats() {
    localStorage.setItem('user_stats', JSON.stringify(userStats));
}

function updateProfileStats() {
    document.getElementById('chatsCount').textContent = userStats.createdChats;
    document.getElementById('messagesCount').textContent = userStats.sentMessages;
    document.getElementById('friendsCount').textContent = userStats.friends;
    document.getElementById('daysCount').textContent = userStats.daysActive;
    document.getElementById('profileReputation').textContent = userStats.reputation;
}

function getTimeAgo(timestamp) {
    const diff = Date.now() - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    if (minutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (minutes < 60) return minutes + ' –º–∏–Ω –Ω–∞–∑–∞–¥';
    if (hours < 24) return hours + ' —á –Ω–∞–∑–∞–¥';
    return Math.floor(diff / 86400000) + ' –¥–Ω –Ω–∞–∑–∞–¥';
}

function showNotification(message) {
    const existingSnackbars = document.querySelectorAll('.snackbar');
    existingSnackbars.forEach(snackbar => snackbar.remove());
    
    const snackbar = document.createElement('div');
    snackbar.className = 'snackbar';
    snackbar.textContent = message;
    document.body.appendChild(snackbar);
    
    setTimeout(() => {
        snackbar.remove();
    }, 3000);
}

function setupEventListeners() {
    document.querySelectorAll('.modal-overlay').forEach(modal => {
        modal.addEventListener('click', function(e) {
            if (e.target === this) this.style.display = 'none';
        });
    });

    document.getElementById('messageInput')?.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞
function addToFriends() {
    showNotification('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è!');
    userStats.friends++;
    saveUserStats();
    updateProfileStats();
}

function reportUser() {
    showNotification('‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º');
}

// –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
function enableNotifications() {
    showNotification('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!');
}

function openMyChats() {
    const myChatsCount = allChats.filter(chat => chat.userId === vkUser?.id).length;
    if (myChatsCount > 0) {
        showNotification(`–£ –≤–∞—Å ${myChatsCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤`);
    } else {
        showNotification('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤');
    }
}

function shareApp() {
    showNotification('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —Å –¥—Ä—É–∑—å—è–º–∏!');
}

function inviteFriends() {
    showNotification('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!');
}

function addToFavorites() {
    showNotification('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');
}

function support() {
    showNotification('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã VK');
}

function openNotificationsSettings() {
    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function openPrivacySettings() {
    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function openAppInfo() {
    showNotification('–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç v2.0 –¥–ª—è VK');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', initApp);
