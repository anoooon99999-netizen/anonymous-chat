// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = window.location.origin;
const SOCKET_URL = window.location.origin;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allChats = [];
let userStats = {
    createdChats: 0,
    sentMessages: 0,
    friends: 0,
    daysActive: 1,
    reputation: 150
};
let vkUser = null;
let currentChat = null;
let isVK = false;
let currentTheme = '–û–±—â–µ–Ω–∏–µ';
let typingTimer = null;
let onlineUsers = new Set();
let lastChatParams = null;
let socket = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    try {
        if (typeof vkBridge !== 'undefined') {
            await vkBridge.send('VKWebAppInit');
            isVK = true;
            const userInfo = await vkBridge.send('VKWebAppGetUserInfo');
            vkUser = userInfo;
            updateUserInterface(userInfo);
            showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + userInfo.first_name + '!');
        } else {
            throw new Error('VK Bridge not available');
        }
    } catch (error) {
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ VK:', error.message);
        isVK = false;
        vkUser = { 
            id: 'user_' + Math.random().toString(36).substr(2, 9),
            first_name: '–ê–Ω–æ–Ω–∏–º',
            last_name: ''
        };
        updateUserInterface(vkUser);
        showNotification('–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∂–∏–º');
    }

    initSocket();
    await loadAndRenderChats();
    loadUserStats();
    updateProfileStats();
    setupEventListeners();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        if (!currentChat) {
            loadAndRenderChats();
        }
    }, 5000);
}

function updateUserInterface(userInfo) {
    document.getElementById('vkUserName').textContent = userInfo.first_name + (userInfo.last_name ? ' ' + userInfo.last_name : '');
    document.getElementById('vkUserInfo').style.display = 'flex';
    document.getElementById('profileName').textContent = userInfo.first_name + (userInfo.last_name ? ' ' + userInfo.last_name : '');
    document.getElementById('currentAvatar').textContent = userInfo.first_name.charAt(0);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —á–∞—Ç–æ–≤
function switchChatTab(theme) {
    currentTheme = theme;
    
    document.querySelectorAll('.chat-tab').forEach(tab => tab.classList.remove('active'));
    event.target.classList.add('active');
    
    document.getElementById('createChatText').textContent = '–°–æ–∑–¥–∞—Ç—å —á–∞—Ç –¥–ª—è ' + theme;
    renderChatsList();
}

function initSocket() {
    try {
        socket = io(SOCKET_URL);
        
        socket.on('connect', () => {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
            if (currentChat) {
                socket.emit('join_chat', { chatId: currentChat.id, userId: vkUser?.id });
            }
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            loadAndRenderChats();
        });
        
        socket.on('new_message', (message) => {
            if (currentChat && message.chat_id === currentChat.id) {
                addMessageToChat(message);
            }
        });
        
        socket.on('user_joined', (data) => {
            if (currentChat && data.chatId === currentChat.id) {
                onlineUsers.add(data.userId);
                updateOnlineCount();
                showNotification('üë§ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É');
            }
        });
        
        socket.on('user_left', (data) => {
            if (currentChat && data.chatId === currentChat.id) {
                onlineUsers.delete(data.userId);
                updateOnlineCount();
                showPartnerLeftModal();
            }
        });
        
        socket.on('chat_activated', (data) => {
            if (currentChat && data.chatId === currentChat.id) {
                showNotification('üéâ –ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ');
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            loadAndRenderChats();
        });
        
        socket.on('typing_start', (data) => {
            if (currentChat && data.chatId === currentChat.id) {
                document.getElementById('typingIndicator').style.display = 'inline';
            }
        });
        
        socket.on('typing_stop', (data) => {
            if (currentChat && data.chatId === currentChat.id) {
                document.getElementById('typingIndicator').style.display = 'none';
            }
        });
        
        socket.on('online_users', (data) => {
            if (currentChat && data.chatId === currentChat.id) {
                onlineUsers = new Set(data.users);
                updateOnlineCount();
            }
        });
        
        socket.on('error', (data) => {
            showNotification('‚ùå ' + data.message);
        });
        
        // –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        socket.on('new_chat_created', (chat) => {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', chat);
            
            // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —Å–æ–∑–¥–∞–Ω –Ω–µ –Ω–∞–º–∏
            if (chat.creator_id !== vkUser?.id) {
                const newChat = {
                    id: chat.id,
                    gender: chat.user_gender + ', ' + chat.user_age,
                    lookingFor: chat.partner_gender + ', ' + chat.min_age + '-' + chat.max_age,
                    theme: chat.theme,
                    participants_count: chat.participants_count,
                    timestamp: new Date(chat.created_at).getTime(),
                    creator_id: chat.creator_id
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                allChats.unshift(newChat);
                
                console.log(`üéØ –ù–æ–≤—ã–π —á–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ–º—É: "${chat.theme}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chat.creator_id}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —Ç–µ–º–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                if (chat.theme === currentTheme) {
                    renderChatsList();
                    showNotification('üì¢ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "' + chat.theme + '"');
                }
            } else {
                console.log('‚ÑπÔ∏è –≠—Ç–æ –º–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —á–∞—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫');
            }
        });
        
        socket.on('chat_removed', (data) => {
            console.log('üóëÔ∏è –ß–∞—Ç —É–¥–∞–ª–µ–Ω:', data.chatId);
            allChats = allChats.filter(chat => chat.id !== data.chatId);
            renderChatsList();
        });
        
        // –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤
        socket.on('force_refresh_chats', () => {
            console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            loadAndRenderChats();
        });
        
        socket.on('server_stats', (stats) => {
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', stats);
            updateOnlineCounter(stats.online_users || 0);
        });
        
    } catch (error) {
        console.error('Socket error:', error);
    }
}

function updateOnlineCount() {
    const count = onlineUsers.size;
    document.getElementById('onlineCount').textContent = count + ' –æ–Ω–ª–∞–π–Ω';
}

function updateOnlineCounter(count) {
    const onlineElement = document.getElementById('onlineUsersCount');
    if (onlineElement) onlineElement.textContent = count;
}

function handleTyping() {
    if (!currentChat || !socket) return;
    
    socket.emit('typing_start', { 
        chatId: currentChat.id, 
        userId: vkUser?.id 
    });
    
    clearTimeout(typingTimer);
    typingTimer = setTimeout(() => {
        socket.emit('typing_stop', { 
            chatId: currentChat.id, 
            userId: vkUser?.id 
        });
    }, 1000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ (–¢–û–õ–¨–ö–û –ß–£–ñ–ò–ï –ß–ê–¢–´)
window.loadChatsFromServer = async function() {
    try {
        console.log('üåê –ó–∞–ø—Ä–æ—Å –ß–£–ñ–ò–• —á–∞—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', vkUser?.id);
        
        // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const response = await fetch(API_URL + '/api/chats?user_id=' + (vkUser?.id || 'anonymous'));
        if (!response.ok) {
            throw new Error('HTTP error ' + response.status);
        }
        const chats = await response.json();
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–æ –ß–£–ñ–ò–• —á–∞—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞:', chats.length);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
        chats.forEach(chat => {
            console.log(`üîç –ß—É–∂–æ–π —á–∞—Ç ${chat.id}: —Ç–µ–º–∞="${chat.theme}", —Å–æ–∑–¥–∞—Ç–µ–ª—å=${chat.creator_id}`);
        });
        
        return chats.map(chat => ({
            id: chat.id,
            gender: chat.user_gender + ', ' + chat.user_age,
            lookingFor: chat.partner_gender + ', ' + chat.min_age + '-' + chat.max_age,
            theme: chat.theme,
            participants_count: chat.participants_count,
            timestamp: new Date(chat.created_at).getTime(),
            creator_id: chat.creator_id
        }));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤');
        return [];
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ú–û–ò–• —á–∞—Ç–æ–≤ (–¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
async function loadMyChats() {
    try {
        console.log('üì± –ó–∞–ø—Ä–æ—Å –ú–û–ò–• —á–∞—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', vkUser?.id);
        
        const response = await fetch(API_URL + '/api/my_chats?user_id=' + (vkUser?.id || 'anonymous'));
        if (!response.ok) {
            throw new Error('HTTP error ' + response.status);
        }
        const myChats = await response.json();
        console.log('üì± –ü–æ–ª—É—á–µ–Ω–æ –ú–û–ò–• —á–∞—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞:', myChats.length);
        
        return myChats;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∏—Ö —á–∞—Ç–æ–≤:', error);
        return [];
    }
}

async function loadAndRenderChats() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ß–£–ñ–ò–• —á–∞—Ç–æ–≤...');
        const chats = await window.loadChatsFromServer();
        allChats = chats;
        renderChatsList();
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        if (socket) {
            socket.emit('chats_updated', { user_id: vkUser?.id });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ loadAndRenderChats:', error);
    }
}

function renderChatsList() {
    const container = document.getElementById('chatsContainer');
    if (!container) return;
    
    container.innerHTML = '';

    // –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –¢–ï–ú–ï (—Ç–æ–ª—å–∫–æ —á—É–∂–∏–µ —á–∞—Ç—ã)
    const filteredChats = allChats.filter(chat => {
        const matchesTheme = chat.theme === currentTheme;
        const isNotMyChat = chat.creator_id !== vkUser?.id; // –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –Ω–∞—à —á–∞—Ç
        
        console.log(`üîç –§–∏–ª—å—Ç—Ä: "${chat.theme}" === "${currentTheme}": ${matchesTheme}, –Ω–µ –º–æ–π —á–∞—Ç: ${isNotMyChat}`);
        return matchesTheme && isNotMyChat;
    });
    
    console.log(`üéØ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ß–£–ñ–ò–ï —á–∞—Ç—ã –¥–ª—è —Ç–µ–º—ã "${currentTheme}":`, filteredChats.length);
    console.log('üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:', [...new Set(allChats.map(chat => chat.theme))]);

    if (filteredChats.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                <div style="font-size: 48px; margin-bottom: 16px;">üí¨</div>
                <div>–ß–∞—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ "${currentTheme}" –ø–æ–∫–∞ –Ω–µ—Ç</div>
                <div style="font-size: 14px; margin-top: 8px;">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç!</div>
            </div>
        `;
        return;
    }
    
    filteredChats.forEach(chat => {
        const chatElement = document.createElement('div');
        chatElement.className = 'user-card';
        chatElement.onclick = () => startChat(chat);
        
        chatElement.innerHTML = `
            <div class="user-info">
                <div class="info-row">
                    <span class="info-label">–ü–æ–ª:</span>
                    <span class="info-value">${chat.gender}</span>
                </div>
                <div class="info-row">
                    <span class="info-label">–ò—â—É:</span>
                    <span class="info-value">${chat.lookingFor}</span>
                </div>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div class="theme-tag">${chat.theme}</div>
                <div style="font-size: 12px; color: var(--text-secondary);">
                    ${getTimeAgo(chat.timestamp)}
                </div>
            </div>
        `;
        container.appendChild(chatElement);
    });
}

function openCreateChatModal() {
    console.log('üéØ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
    document.getElementById('modalTitle').textContent = '–°–æ–∑–¥–∞—Ç—å —á–∞—Ç –¥–ª—è ' + currentTheme;
    document.getElementById('createChatModal').style.display = 'block';
}

function updateAgeRange() {
    const minSlider = document.getElementById('minAgeSlider');
    const maxSlider = document.getElementById('maxAgeSlider');
    
    let minAge = parseInt(minSlider.value);
    let maxAge = parseInt(maxSlider.value);
    
    if (minAge > maxAge) {
        minAge = maxAge;
        minSlider.value = minAge;
    }
    
    document.getElementById('minAgeValue').textContent = minAge;
    document.getElementById('maxAgeValue').textContent = maxAge;
    
    document.getElementById('minAge').value = minAge;
    document.getElementById('maxAge').value = maxAge;
}

async function createChat() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞...');
    
    const myGenderElement = document.querySelector('#myGenderOptions .option-button.active');
    const partnerGenderElement = document.querySelector('#partnerGenderOptions .option-button.active');
    
    if (!myGenderElement || !partnerGenderElement) {
        showNotification('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è —Å–µ–±—è –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞');
        return;
    }
    
    const myGender = myGenderElement.textContent;
    const myAge = document.getElementById('myAge').value;
    const partnerGender = partnerGenderElement.textContent;
    const minAge = document.getElementById('minAge').value;
    const maxAge = document.getElementById('maxAge').value;

    console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', { 
        myGender, myAge, partnerGender, minAge, maxAge, theme: currentTheme 
    });

    if (!myAge || myAge < 18 || myAge > 80) {
        showNotification('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-80)');
        return;
    }

    if (!minAge || !maxAge || minAge >= maxAge || minAge < 18 || maxAge > 80) {
        showNotification('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (18-80)');
        return;
    }

    lastChatParams = {
        myGender: myGender,
        myAge: parseInt(myAge),
        partnerGender: partnerGender,
        minAge: parseInt(minAge),
        maxAge: parseInt(maxAge),
        theme: currentTheme
    };

    const chatData = {
        user_id: vkUser?.id || 'anonymous',
        user_gender: myGender,
        user_age: parseInt(myAge),
        partner_gender: partnerGender,
        min_age: parseInt(minAge),
        max_age: parseInt(maxAge),
        theme: currentTheme
    };

    console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', chatData);

    try {
        showNotification('‚è≥ –°–æ–∑–¥–∞–µ–º —á–∞—Ç...');
        
        const response = await fetch(API_URL + '/api/chats', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(chatData)
        });
        
        console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
        
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', result);
            
            userStats.createdChats++;
            saveUserStats();
            updateProfileStats();
            
            showNotification('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
            closeCreateChatModal();
            
            // –í–ê–ñ–ù–û: –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç —á–∞—Ç)
            if (socket) {
                socket.emit('new_chat_created_global');
            }
            
            // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ - —Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Å–≤–æ–π —á–∞—Ç
            // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç
            setTimeout(() => {
                const newChat = {
                    id: result.id,
                    gender: myGender + ', ' + myAge,
                    lookingFor: partnerGender + ', ' + minAge + '-' + maxAge,
                    theme: currentTheme,
                    participants_count: 1,
                    timestamp: Date.now(),
                    creator_id: vkUser?.id // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à —á–∞—Ç
                };
                startChat(newChat);
            }, 500);
            
        } else {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.status, errorText);
            showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    }
}

async function startChat(chat) {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç:', chat.id, '–º–æ–π —á–∞—Ç:', chat.creator_id === vkUser?.id);
    
    currentChat = null;
    
    const messagesContainer = document.getElementById('messagesContainer');
    if (messagesContainer) {
        messagesContainer.innerHTML = `
            <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                <div style="font-size: 48px; margin-bottom: 16px;">üí≠</div>
                <div>–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —á–∞—Ç—É...</div>
                ${chat.creator_id === vkUser?.id ? '<div style="font-size: 14px; margin-top: 8px;">–û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</div>' : ''}
            </div>
        `;
    }
    
    currentChat = chat;
    document.getElementById('chatRoomTitle').textContent = getChatEmoji(chat.theme) + ' ' + chat.theme;
    showScreen('chatRoomScreen');
    
    document.body.classList.add('chat-room-active');
    
    if (socket) {
        socket.emit('join_chat', { chatId: chat.id, userId: vkUser?.id });
    }
    
    await loadMessages(chat.id);
    
    setTimeout(() => {
        const input = document.getElementById('messageInput');
        if (input) input.focus();
    }, 300);
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
// [–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ app.js –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏]
