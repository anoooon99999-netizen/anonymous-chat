const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(__dirname));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
let activeChats = new Map();
let userSockets = new Map();
let chatMessages = new Map();

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
app.post('/api/chats', (req, res) => {
  try {
    const { user_id, user_gender, user_age, partner_gender, min_age, max_age, theme } = req.body;
    
    if (!user_gender || !user_age || !partner_gender || !min_age || !max_age || !theme) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    if (user_age < 18 || user_age > 80) {
      return res.status(400).json({ error: '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 80 –ª–µ—Ç' });
    }

    if (min_age < 18 || max_age > 80 || min_age >= max_age) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω' });
    }
    
    const chatId = uuidv4();
    const chat = {
      id: chatId,
      creator_id: user_id,
      user_gender,
      user_age: parseInt(user_age),
      partner_gender,
      min_age: parseInt(min_age),
      max_age: parseInt(max_age),
      theme,
      participants: [user_id],
      created_at: new Date().toISOString(),
      status: 'waiting'
    };
    
    activeChats.set(chatId, chat);
    chatMessages.set(chatId, []);
    
    console.log(`üÜï –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω: ${chatId}, —Ç–µ–º–∞: ${theme}, —Å–æ–∑–¥–∞—Ç–µ–ª—å: ${user_id}`);
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –ö–†–û–ú–ï —Å–æ–∑–¥–∞—Ç–µ–ª—è
    socket.broadcast.emit('new_chat_created', {
      id: chat.id,
      user_gender: chat.user_gender,
      user_age: chat.user_age,
      partner_gender: chat.partner_gender,
      min_age: chat.min_age,
      max_age: chat.max_age,
      theme: chat.theme,
      created_at: chat.created_at,
      participants_count: chat.participants.length,
      status: chat.status,
      creator_id: chat.creator_id
    });

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ö–†–û–ú–ï —Å–æ–∑–¥–∞—Ç–µ–ª—è
    socket.broadcast.emit('force_refresh_chats');
    
    res.json(chat);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ (–¢–û–õ–¨–ö–û –ß–£–ñ–ò–ï)
app.get('/api/chats', (req, res) => {
  try {
    const { user_id } = req.query;
    
    console.log(`üìä –ó–∞–ø—Ä–æ—Å —á–∞—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user_id}`);
    
    const chats = Array.from(activeChats.values())
      .filter(chat => {
        const isNotCreator = chat.creator_id !== user_id;
        const isWaiting = chat.status === 'waiting';
        return isNotCreator && isWaiting;
      })
      .map(chat => ({
        id: chat.id,
        user_gender: chat.user_gender,
        user_age: chat.user_age,
        partner_gender: chat.partner_gender,
        min_age: chat.min_age,
        max_age: chat.max_age,
        theme: chat.theme,
        created_at: chat.created_at,
        participants_count: chat.participants.length,
        status: chat.status,
        creator_id: chat.creator_id
      }));
    
    console.log(`üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${chats.length} —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user_id}`);
    res.json(chats);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/api/messages', (req, res) => {
  try {
    const { chat_id, user_id, message } = req.body;
    
    if (!activeChats.has(chat_id)) {
      return res.status(404).json({ error: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const chat = activeChats.get(chat_id);
    if (!chat.participants.includes(user_id)) {
      return res.status(403).json({ error: '–ù–µ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞' });
    }
    
    const messageObj = {
      id: uuidv4(),
      chat_id,
      user_id,
      message,
      created_at: new Date().toISOString()
    };
    
    const messages = chatMessages.get(chat_id) || [];
    messages.push(messageObj);
    chatMessages.set(chat_id, messages);
    
    io.to(chat_id).emit('new_message', messageObj);
    
    res.json(messageObj);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
app.get('/api/messages', (req, res) => {
  try {
    const { chat_id } = req.query;
    
    if (!chatMessages.has(chat_id)) {
      return res.json([]);
    }
    
    const messages = chatMessages.get(chat_id);
    res.json(messages);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö —á–∞—Ç–æ–≤ (–¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
app.get('/api/my_chats', (req, res) => {
  try {
    const { user_id } = req.query;
    
    const myChats = Array.from(activeChats.values())
      .filter(chat => chat.creator_id === user_id && chat.status === 'waiting')
      .map(chat => ({
        id: chat.id,
        user_gender: chat.user_gender,
        user_age: chat.user_age,
        partner_gender: chat.partner_gender,
        min_age: chat.min_age,
        max_age: chat.max_age,
        theme: chat.theme,
        created_at: chat.created_at,
        participants_count: chat.participants.length,
        status: chat.status,
        is_my_chat: true
      }));
    
    console.log(`üì± –ú–æ–∏ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}: ${myChats.length}`);
    res.json(myChats);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∏—Ö —á–∞—Ç–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// Socket.io –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log('üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Ç–æ–≤
  socket.on('request_chats_update', (data) => {
    const { user_id } = data;
    console.log('üîÑ –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ –æ—Ç:', user_id);
    socket.broadcast.emit('force_refresh_chats');
  });

  socket.on('chats_updated', (data) => {
    const { user_id } = data;
    socket.broadcast.emit('force_refresh_chats', { exclude_user: user_id });
  });

  socket.on('new_chat_created_global', () => {
    socket.broadcast.emit('force_refresh_chats');
  });

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É
  socket.on('join_chat', (data) => {
    try {
      const { chatId, userId } = data;
      
      if (!activeChats.has(chatId)) {
        socket.emit('error', { message: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        return;
      }
      
      const chat = activeChats.get(chatId);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ —á–∞—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
      if (chat.status === 'waiting' && chat.creator_id !== userId) {
        if (chat.participants.length < 2) {
          chat.participants.push(userId);
          
          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç –ø—Ä–∏ 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
          if (chat.participants.length === 2) {
            chat.status = 'active';
            console.log(`üéâ –ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${chatId}`);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            io.emit('chat_activated', { chatId });
            io.to(chatId).emit('chat_activated', { chatId });
            
            // –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö
            io.emit('chat_removed', { chatId });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            io.emit('force_refresh_chats');
          }
        }
      }
      
      userSockets.set(userId, socket.id);
      socket.join(chatId);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      socket.to(chatId).emit('user_joined', { chatId, userId });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω
      io.to(chatId).emit('online_users', {
        chatId,
        users: chat.participants
      });
      
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É ${chatId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–∞—Ç—É:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });
  
  // –ü–æ–∫–∏–¥–∞–Ω–∏–µ —á–∞—Ç–∞
  socket.on('leave_chat', (data) => {
    try {
      const { chatId, userId } = data;
      
      if (activeChats.has(chatId)) {
        const chat = activeChats.get(chatId);
        const userIndex = chat.participants.indexOf(userId);
        
        if (userIndex > -1) {
          chat.participants.splice(userIndex, 1);
          
          if (chat.participants.length === 0) {
            activeChats.delete(chatId);
            chatMessages.delete(chatId);
            io.emit('chat_removed', { chatId });
          }
          
          io.emit('force_refresh_chats');
        }
        
        socket.leave(chatId);
        socket.to(chatId).emit('user_left', { chatId, userId });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞:', error);
    }
  });
  
  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
  socket.on('typing_start', (data) => {
    const { chatId } = data;
    socket.to(chatId).emit('typing_start', { chatId });
  });
  
  socket.on('typing_stop', (data) => {
    const { chatId } = data;
    socket.to(chatId).emit('typing_stop', { chatId });
  });
  
  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', () => {
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);
    
    for (let [userId, socketId] of userSockets.entries()) {
      if (socketId === socket.id) {
        userSockets.delete(userId);
        break;
      }
    }
  });
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(() => {
  io.emit('force_refresh_chats');
}, 10000);

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —á–∞—Ç–æ–≤ (24 —á–∞—Å–∞)
setInterval(() => {
  const now = Date.now();
  const dayAgo = now - (24 * 60 * 60 * 1000);
  
  let cleanedCount = 0;
  
  for (let [chatId, chat] of activeChats.entries()) {
    const chatTime = new Date(chat.created_at).getTime();
    
    if (chatTime < dayAgo) {
      activeChats.delete(chatId);
      chatMessages.delete(chatId);
      io.emit('chat_removed', { chatId });
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —á–∞—Ç: ${chatId}`);
      cleanedCount++;
    }
  }

  if (cleanedCount > 0) {
    io.emit('force_refresh_chats');
  }
}, 60 * 60 * 1000);

server.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
