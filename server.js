const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(__dirname));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
let activeChats = new Map(); // chatId -> chat data
let userSockets = new Map(); // userId -> socketId
let chatMessages = new Map(); // chatId -> messages array

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
app.post('/api/chats', (req, res) => {
  try {
    const { user_id, user_gender, user_age, partner_gender, min_age, max_age, theme } = req.body;
    
    const chatId = uuidv4();
    const chat = {
      id: chatId,
      creator_id: user_id,
      user_gender,
      user_age: parseInt(user_age),
      partner_gender,
      min_age: parseInt(min_age),
      max_age: parseInt(max_age),
      theme,
      participants: [user_id],
      created_at: new Date().toISOString(),
      status: 'waiting'
    };
    
    activeChats.set(chatId, chat);
    chatMessages.set(chatId, []);
    
    console.log(`üÜï –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω: ${chatId}, —Ç–µ–º–∞: ${theme}`);
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
    io.emit('new_chat_created', {
      id: chat.id,
      user_gender: chat.user_gender,
      user_age: chat.user_age,
      partner_gender: chat.partner_gender,
      min_age: chat.min_age,
      max_age: chat.max_age,
      theme: chat.theme,
      created_at: chat.created_at,
      participants_count: chat.participants.length,
      status: chat.status
    });

    res.json(chat);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
app.get('/api/chats', (req, res) => {
  const chats = Array.from(activeChats.values())
    .filter(chat => chat.status === 'waiting' && chat.participants.length < 2)
    .map(chat => ({
      id: chat.id,
      user_gender: chat.user_gender,
      user_age: chat.user_age,
      partner_gender: chat.partner_gender,
      min_age: chat.min_age,
      max_age: chat.max_age,
      theme: chat.theme,
      created_at: chat.created_at,
      participants_count: chat.participants.length
    }));
  
  res.json(chats);
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/api/messages', (req, res) => {
  const { chat_id, user_id, message, user_name } = req.body;
  
  if (!activeChats.has(chat_id)) {
    return res.status(404).json({ error: 'Chat not found' });
  }
  
  const chat = activeChats.get(chat_id);
  if (!chat.participants.includes(user_id)) {
    return res.status(403).json({ error: 'Not a participant' });
  }
  
  const messageObj = {
    id: uuidv4(),
    chat_id,
    user_id,
    user_name,
    message,
    created_at: new Date().toISOString()
  };
  
  const messages = chatMessages.get(chat_id) || [];
  messages.push(messageObj);
  chatMessages.set(chat_id, messages);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
  io.to(chat_id).emit('new_message', messageObj);
  
  res.json(messageObj);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
app.get('/api/messages', (req, res) => {
  const { chat_id } = req.query;
  
  if (!chatMessages.has(chat_id)) {
    return res.json([]);
  }
  
  const messages = chatMessages.get(chat_id);
  res.json(messages);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
app.get('/api/chats/:chatId', (req, res) => {
  const { chatId } = req.params;
  
  if (!activeChats.has(chatId)) {
    return res.status(404).json({ error: 'Chat not found' });
  }
  
  const chat = activeChats.get(chatId);
  res.json(chat);
});

// Socket.io –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log('üîó User connected:', socket.id);
  
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É
  socket.on('join_chat', (data) => {
    const { chatId, userId, userData } = data;
    
    if (!activeChats.has(chatId)) {
      socket.emit('error', { message: 'Chat not found' });
      return;
    }
    
    const chat = activeChats.get(chatId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
    if (chat.participants.length >= 2 && !chat.participants.includes(userId)) {
      socket.emit('error', { message: 'Chat is full' });
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!chat.participants.includes(userId)) {
      chat.participants.push(userId);
      
      // –ï—Å–ª–∏ —Ç–µ–ø–µ—Ä—å 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç –∏ —É–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
      if (chat.participants.length === 2) {
        chat.status = 'active';
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —á—Ç–æ —á–∞—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        io.emit('chat_became_full', {
          id: chatId,
          status: 'active',
          participants_count: 2
        });
        
        console.log(`‚úÖ –ß–∞—Ç ${chatId} –∑–∞–ø–æ–ª–Ω–µ–Ω, —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        io.to(chatId).emit('chat_activated', { 
          chatId,
          participants: chat.participants
        });
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –¥–ª—è –≤—Å–µ—Ö (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª—Å—è –ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫)
        io.emit('chat_updated', {
          id: chatId,
          status: 'waiting',
          participants_count: chat.participants.length
        });
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> —Å–æ–∫–µ—Ç
    userSockets.set(userId, socket.id);
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º —Å–æ–∫–µ—Ç –∫ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞
    socket.join(chatId);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
    socket.to(chatId).emit('user_joined', {
      chatId,
      userId,
      userData,
      participants: chat.participants
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏—Ö –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    io.to(chatId).emit('online_users', {
      chatId,
      users: chat.participants
    });
    
    console.log(`üë• User ${userId} joined chat ${chatId}, participants: ${chat.participants.length}/2`);
  });
  
  // –ü–æ–∫–∏–¥–∞–Ω–∏–µ —á–∞—Ç–∞
  socket.on('leave_chat', (data) => {
    const { chatId, userId, isCreator } = data;
    
    if (activeChats.has(chatId)) {
      const chat = activeChats.get(chatId);
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const userIndex = chat.participants.indexOf(userId);
      if (userIndex > -1) {
        chat.participants.splice(userIndex, 1);
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –≤—ã—Ö–æ–¥–µ
      socket.to(chatId).emit('user_left', { 
        chatId, 
        userId,
        remainingParticipants: chat.participants.length
      });
      
      // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å - –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
      if (chat.participants.length === 0) {
        activeChats.delete(chatId);
        chatMessages.delete(chatId);
        io.emit('chat_closed', { chatId });
        console.log(`üóëÔ∏è –ß–∞—Ç ${chatId} –∑–∞–∫—Ä—ã—Ç (–Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`);
      } else {
        // –ï—Å–ª–∏ –≤—ã—à–µ–ª –ù–ï —Å–æ–∑–¥–∞—Ç–µ–ª—å (–≤—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫)
        if (!isCreator && chat.participants.length === 1) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
          const creatorId = chat.participants[0]; // –æ—Å—Ç–∞–≤—à–∏–π—Å—è —É—á–∞—Å—Ç–Ω–∏–∫ - —Å–æ–∑–¥–∞—Ç–µ–ª—å
          const creatorSocketId = userSockets.get(creatorId);
          
          if (creatorSocketId) {
            io.to(creatorSocketId).emit('partner_left_chat', {
              chatId,
              chatData: {
                user_gender: chat.user_gender,
                user_age: chat.user_age,
                partner_gender: chat.partner_gender,
                min_age: chat.min_age,
                max_age: chat.max_age,
                theme: chat.theme
              },
              options: ['recreate_chat', 'return_to_chats']
            });
          }
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã—à–µ–¥—à–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —á–∞—Ç–æ–≤
          const userSocketId = userSockets.get(userId);
          if (userSocketId) {
            io.to(userSocketId).emit('redirect_to_chats');
          }
          
          chat.status = 'waiting';
          
          // –î–µ–ª–∞–µ–º —á–∞—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          io.emit('chat_became_available', {
            id: chatId,
            status: 'waiting',
            participants_count: 1,
            user_gender: chat.user_gender,
            user_age: chat.user_age,
            partner_gender: chat.partner_gender,
            min_age: chat.min_age,
            max_age: chat.max_age,
            theme: chat.theme,
            created_at: chat.created_at
          });
          
          console.log(`üîÑ –ß–∞—Ç ${chatId} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–≤—ã—à–µ–ª —É—á–∞—Å—Ç–Ω–∏–∫)`);
        }
        // –ï—Å–ª–∏ –≤—ã—à–µ–ª —Å–æ–∑–¥–∞—Ç–µ–ª—å —á–∞—Ç–∞
        else if (isCreator && chat.participants.length === 1) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è —É—á–∞—Å—Ç–Ω–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          const remainingUserId = chat.participants[0];
          const remainingSocketId = userSockets.get(remainingUserId);
          
          if (remainingSocketId) {
            io.to(remainingSocketId).emit('creator_left_chat', {
              chatId,
              options: ['return_to_chats']
            });
          }
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —á–∞—Ç–æ–≤
          const creatorSocketId = userSockets.get(userId);
          if (creatorSocketId) {
            io.to(creatorSocketId).emit('redirect_to_chats');
          }
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç, —Ç–∞–∫ –∫–∞–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—å —É—à–µ–ª
          activeChats.delete(chatId);
          chatMessages.delete(chatId);
          io.emit('chat_closed', { chatId });
          console.log(`üóëÔ∏è –ß–∞—Ç ${chatId} –∑–∞–∫—Ä—ã—Ç (—Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—ã—à–µ–ª)`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        io.emit('chat_updated', {
          id: chatId,
          status: chat.status,
          participants_count: chat.participants.length
        });
      }
      
      socket.leave(chatId);
    }
  });
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–∫–æ–≥–æ –∂–µ —á–∞—Ç–∞ (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ)
  socket.on('recreate_chat', (data) => {
    const { originalChatData, userId } = data;
    
    const chatId = uuidv4();
    const chat = {
      id: chatId,
      creator_id: userId,
      user_gender: originalChatData.user_gender,
      user_age: originalChatData.user_age,
      partner_gender: originalChatData.partner_gender,
      min_age: originalChatData.min_age,
      max_age: originalChatData.max_age,
      theme: originalChatData.theme,
      participants: [userId],
      created_at: new Date().toISOString(),
      status: 'waiting'
    };
    
    activeChats.set(chatId, chat);
    chatMessages.set(chatId, []);
    
    console.log(`üîÑ –ß–∞—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω: ${chatId}, —Ç–µ–º–∞: ${chat.theme}`);
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
    io.emit('new_chat_created', {
      id: chat.id,
      user_gender: chat.user_gender,
      user_age: chat.user_age,
      partner_gender: chat.partner_gender,
      min_age: chat.min_age,
      max_age: chat.max_age,
      theme: chat.theme,
      created_at: chat.created_at,
      participants_count: chat.participants.length,
      status: chat.status
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    socket.emit('chat_recreated', { newChatId: chatId });
  });
  
  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
  socket.on('typing_start', (data) => {
    const { chatId, userId } = data;
    socket.to(chatId).emit('typing_start', { chatId, userId });
  });
  
  socket.on('typing_stop', (data) => {
    const { chatId, userId } = data;
    socket.to(chatId).emit('typing_stop', { chatId, userId });
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', () => {
    console.log('üîå User disconnected:', socket.id);
    
    // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (let [userId, socketId] of userSockets.entries()) {
      if (socketId === socket.id) {
        userSockets.delete(userId);
        break;
      }
    }
  });
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —á–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now();
  const hourAgo = now - (60 * 60 * 1000);
  
  for (let [chatId, chat] of activeChats.entries()) {
    const chatTime = new Date(chat.created_at).getTime();
    
    if (chatTime < hourAgo) {
      activeChats.delete(chatId);
      chatMessages.delete(chatId);
      io.emit('chat_closed', { chatId });
      console.log(`üóëÔ∏è  Cleaned up old chat: ${chatId}`);
    }
  }
}, 10 * 60 * 1000);

server.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});
