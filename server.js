const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(__dirname));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
let activeChats = new Map(); // chatId -> chat data
let userSockets = new Map(); // userId -> socketId
let chatMessages = new Map(); // chatId -> messages array

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
app.post('/api/chats', (req, res) => {
  try {
    const { user_id, user_gender, user_age, partner_gender, min_age, max_age, theme } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!user_gender || !user_age || !partner_gender || !min_age || !max_age || !theme) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    if (user_age < 18 || user_age > 80) {
      return res.status(400).json({ error: '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 80 –ª–µ—Ç' });
    }

    if (min_age < 18 || max_age > 80 || min_age >= max_age) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω' });
    }
    
    const chatId = uuidv4();
    const chat = {
      id: chatId,
      creator_id: user_id,
      user_gender,
      user_age: parseInt(user_age),
      partner_gender,
      min_age: parseInt(min_age),
      max_age: parseInt(max_age),
      theme,
      participants: [user_id], // –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
      created_at: new Date().toISOString(),
      status: 'waiting' // –í–ê–ñ–ù–û: —Å—Ç–∞—Ç—É—Å "–æ–∂–∏–¥–∞–Ω–∏–µ", –∞ –Ω–µ "–∞–∫—Ç–∏–≤–Ω—ã–π"
    };
    
    activeChats.set(chatId, chat);
    chatMessages.set(chatId, []);
    
    console.log(`üÜï New chat created: ${chatId}, theme: ${theme}, status: waiting`);
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
    io.emit('new_chat_created', {
      id: chat.id,
      user_gender: chat.user_gender,
      user_age: chat.user_age,
      partner_gender: chat.partner_gender,
      min_age: chat.min_age,
      max_age: chat.max_age,
      theme: chat.theme,
      created_at: chat.created_at,
      participants_count: chat.participants.length,
      status: chat.status // –í–ê–ñ–ù–û: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    });

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ —É –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    io.emit('chats_updated');
    io.emit('force_chats_refresh');
    
    res.json(chat);
  } catch (error) {
    console.error('‚ùå Error creating chat:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
app.get('/api/chats', (req, res) => {
  try {
    const chats = Array.from(activeChats.values())
      .filter(chat => chat.status === 'waiting') // –í–ê–ñ–ù–û: —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ —á–∞—Ç—ã
      .map(chat => ({
        id: chat.id,
        user_gender: chat.user_gender,
        user_age: chat.user_age,
        partner_gender: chat.partner_gender,
        min_age: chat.min_age,
        max_age: chat.max_age,
        theme: chat.theme,
        created_at: chat.created_at,
        participants_count: chat.participants.length,
        status: chat.status
      }));
    
    console.log(`üìä Sending ${chats.length} waiting chats to client`);
    console.log(`üéØ Available themes:`, [...new Set(chats.map(chat => chat.theme))]);
    res.json(chats);
  } catch (error) {
    console.error('‚ùå Error fetching chats:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/api/messages', (req, res) => {
  try {
    const { chat_id, user_id, message } = req.body;
    
    if (!activeChats.has(chat_id)) {
      return res.status(404).json({ error: 'Chat not found' });
    }
    
    const chat = activeChats.get(chat_id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    if (chat.status !== 'active' || !chat.participants.includes(user_id)) {
      return res.status(403).json({ error: 'Chat is not active or user is not a participant' });
    }
    
    const messageObj = {
      id: uuidv4(),
      chat_id,
      user_id,
      message,
      created_at: new Date().toISOString()
    };
    
    const messages = chatMessages.get(chat_id) || [];
    messages.push(messageObj);
    chatMessages.set(chat_id, messages);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    io.to(chat_id).emit('new_message', messageObj);
    
    res.json(messageObj);
  } catch (error) {
    console.error('‚ùå Error sending message:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
app.get('/api/messages', (req, res) => {
  try {
    const { chat_id } = req.query;
    
    if (!chatMessages.has(chat_id)) {
      return res.json([]);
    }
    
    const messages = chatMessages.get(chat_id);
    const anonymousMessages = messages.map(msg => ({
      id: msg.id,
      chat_id: msg.chat_id,
      user_id: msg.user_id,
      message: msg.message,
      created_at: msg.created_at
    }));
    
    res.json(anonymousMessages);
  } catch (error) {
    console.error('‚ùå Error fetching messages:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/stats', (req, res) => {
  try {
    const onlineUsers = userSockets.size;
    const activeChatsCount = Array.from(activeChats.values()).filter(chat => chat.status === 'active').length;
    
    res.json({
      online_users: onlineUsers,
      active_chats: activeChatsCount,
      waiting_chats: Array.from(activeChats.values()).filter(chat => chat.status === 'waiting').length
    });
  } catch (error) {
    console.error('‚ùå Error fetching stats:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Socket.io –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log('üîó User connected:', socket.id);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
  socket.on('chats_loaded', () => {
    console.log('üîÑ Client loaded chats, notifying others');
    socket.broadcast.emit('chats_updated');
  });

  socket.on('new_chat_created_global', () => {
    console.log('üîÑ New chat created globally, refreshing all clients');
    io.emit('chats_updated');
    io.emit('force_chats_refresh');
  });

  socket.on('chats_refreshed', () => {
    console.log('üîÑ Chats refreshed, syncing all clients');
    socket.broadcast.emit('chats_updated');
  });

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É
  socket.on('join_chat', (data) => {
    try {
      const { chatId, userId } = data;
      
      if (!activeChats.has(chatId)) {
        socket.emit('error', { message: 'Chat not found' });
        return;
      }
      
      const chat = activeChats.get(chatId);
      
      // –ï—Å–ª–∏ —á–∞—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å
      if (chat.status === 'waiting' && chat.creator_id !== userId) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if (chat.participants.length < 2) {
          chat.participants.push(userId);
          
          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç –∫–æ–≥–¥–∞ –µ—Å—Ç—å 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞
          if (chat.participants.length === 2) {
            chat.status = 'active';
            console.log(`üéâ Chat activated: ${chatId}`);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞
            io.emit('chat_activated', { chatId });
            io.to(chatId).emit('chat_activated', { chatId });

            // –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            io.emit('chat_removed', { chatId });
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —É –≤—Å–µ—Ö
            io.emit('chats_updated');
          }
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> —Å–æ–∫–µ—Ç
      userSockets.set(userId, socket.id);
      
      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º —Å–æ–∫–µ—Ç –∫ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞
      socket.join(chatId);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
      socket.to(chatId).emit('user_joined', {
        chatId,
        userId: userId
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏—Ö –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      io.to(chatId).emit('online_users', {
        chatId,
        users: chat.participants
      });
      
      console.log(`üë• User ${userId} joined chat ${chatId}, status: ${chat.status}`);
      
      // –ï—Å–ª–∏ —á–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      if (chat.status === 'active') {
        const messages = chatMessages.get(chatId) || [];
        socket.emit('chat_messages', { chatId, messages });
      }
      
    } catch (error) {
      console.error('‚ùå Error joining chat:', error);
      socket.emit('error', { message: 'Internal server error' });
    }
  });
  
  // –ü–æ–∫–∏–¥–∞–Ω–∏–µ —á–∞—Ç–∞
  socket.on('leave_chat', (data) => {
    try {
      const { chatId, userId } = data;
      
      if (activeChats.has(chatId)) {
        const chat = activeChats.get(chatId);
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const userIndex = chat.participants.indexOf(userId);
        if (userIndex > -1) {
          chat.participants.splice(userIndex, 1);
          
          // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å - —É–¥–∞–ª—è–µ–º —á–∞—Ç
          if (chat.participants.length === 0) {
            activeChats.delete(chatId);
            chatMessages.delete(chatId);
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞
            io.emit('chat_removed', { chatId });
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            io.emit('chats_updated');
          } else if (chat.participants.length === 1 && chat.status === 'active') {
            // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ
            chat.status = 'waiting';
            io.emit('chats_updated');
          }
        }
        
        socket.leave(chatId);
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        socket.to(chatId).emit('user_left', { chatId, userId });
      }
    } catch (error) {
      console.error('‚ùå Error leaving chat:', error);
    }
  });
  
  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
  socket.on('typing_start', (data) => {
    const { chatId } = data;
    socket.to(chatId).emit('typing_start', { chatId });
  });
  
  socket.on('typing_stop', (data) => {
    const { chatId } = data;
    socket.to(chatId).emit('typing_stop', { chatId });
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', () => {
    console.log('üîå User disconnected:', socket.id);
    
    // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (let [userId, socketId] of userSockets.entries()) {
      if (socketId === socket.id) {
        userSockets.delete(userId);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        for (let [chatId, chat] of activeChats.entries()) {
          if (chat.participants.includes(userId)) {
            socket.to(chatId).emit('user_left', { chatId, userId });
          }
        }
        break;
      }
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —á–∞—Ç–∞—Ö
    io.emit('chats_updated');
  });
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —á–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now();
  const hourAgo = now - (60 * 60 * 1000);
  
  let cleanedCount = 0;
  
  for (let [chatId, chat] of activeChats.entries()) {
    const chatTime = new Date(chat.created_at).getTime();
    
    if (chatTime < hourAgo) {
      activeChats.delete(chatId);
      chatMessages.delete(chatId);
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞
      io.emit('chat_removed', { chatId });
      console.log(`üóëÔ∏è Cleaned up old chat: ${chatId}`);
      cleanedCount++;
    }
  }

  // –ï—Å–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —á–∞—Ç—ã - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
  if (cleanedCount > 0) {
    io.emit('chats_updated');
    console.log(`üîÑ Syncing clients after cleaning ${cleanedCount} old chats`);
  }
}, 10 * 60 * 1000);

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
setInterval(() => {
  console.log('üîÑ Periodic sync: refreshing all clients');
  io.emit('chats_updated');
}, 30000);

server.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üîÑ Sync enabled: clients will be synchronized every 30 seconds`);
});
